
    public record ValidationResults(bool TestCheck1, bool TestCheck2);

    public static class DataRetriever
    {
        public static Task<ValidationResults> GetValidations(Level1 v)
        {
            return Task.FromResult(
                new ValidationResults(v.Bool, v.NString == null)
            );
        }
    }

    public class Validator : AbstractValidator<Level1>
    {
        public Validator()
        {
            Switch("ScopedData", x => DataRetriever.GetValidations(x))
                // Ignore is purely decorative, to show you've considered specific outcomes,
                // and are meaning to ignore them.
                .Ignore(
                    "Both Checks Are False",
                    (x, data) => data is { TestCheck1: false, TestCheck2: false })
                // For the specified field, show this description, and if this check fails,
                // show this error.
                .Case(
                    x => x.Bool, 
                    "Check 1 and Check 2 should be true", 
                    (x, data) => data is { TestCheck1: true, TestCheck2: true }, 
                    "TestCheck1 and TestCheck2 were not true")
                .Case(
                    x => x.Bool,
                    "Check 1 must be true, but check 2 is false",
                    (x, data) => data is { TestCheck1: true, TestCheck2: false },
                    "TestCheck1 must be true and TestCheck2 must not be true");
        }
    }
    