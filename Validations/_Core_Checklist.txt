Version 0.9
	requirements:
		Tests All Validations		(completed, final checks to go)
		Tests Scopes				(completed, final checks to go)
		Tests for Depth				(completed, final checks to go)
		Tests For ForEach			(completed, final checks to go)
		Swashbuckle Integration		(completed)
			Scopes					(completed, final checks to go)
			Whens					(completed, final checks to go)
			Foreach					(completed, final checks to go)
			AllValidations			(completed, final checks to go)
			Tests					(completed, final checks to go)
			Demo					(completed, final checks to go)
		Mediatr Integration			(completed, final checks to go)
			Tests					(completed, final checks to go)
			Demo					(completed)
		Website						(Running)
			Running					(completed)
			Instructions			(completed)
			Validation Examples		(completed)
		Rename Main Validator		(Rejected)

Version 1.0
	requirements
		Tests to limit Interface access and limiting interfaces (done)
		Switch validation  (done)
		Remove Lower DotNet versions  (done)
		Check Tests

Version 1.0.*
	IsJson
	Scale Precision
	IsOneOf
	Matches (Regular Expression)
	IsUri (may need to refine)
	Numeric Types compare Favourbly, instead of Fail. ie : int field Lessthan long.MaxValue, fails.
	Switch gets a custom IsCustomValidation implementation so the json output is clearer. And it checks all previous cases, and bails early.
	TEST AbstractValidatableObject

Version 1.1  -> Moved to API Validations
	Per Function/End point, Object descriptions and parameter value descriptions.

Completed:
*When scopes (Testing Needed)
	Whens for all the different ways it can work.

*Scope  (Testing Needed)
	Allow accessing external data, while not interfering with Description

*Include (Testing Needed)
	Need to be able to Include another validator to easily segregate rules (Must work inside when)


Version 1.0
**IFieldDescriptor Limitation
	Make it more difficult for external users to see/use IFieldDescriptor Store only functions

*Switch (Moved to _Checklist for Validations as design is completable as a Validation)
	Pattern matching is super useful for complex validations.
	need a way to emulate/use that, to produce succint but complex validations.

** Aggregate Validators for Lists.
	I want to be able to compare values in multiple list items against each other
	Ie:
	IsAllItemsUnique()
	or
	IsInOrder(IOrderer)



Unknown If Will Develop:
*Depends On
	Need a way to ensure another field is done first, and only if it succeeds is this item completed.


**AddError  ** Optional, may infact be a bad idea, may also be needed for switch.
	Want a way to just say "Your here, error"
	For example, multiple when's deep, Be able to just say Error on this field. 


** Where filter on ForEach or DescribeEnumerable
	Potentially a way to filter which elements validators will by applied to.
